Input : N = 5
Output:
          1
        1   1
      1   2   1
    1   3   3   1
  1   4   6   4   1

  ----------------------------------------------------
using nCr formula

nCr formula:

 n ! / ( n â€“ r ) ! r ! 

 
             0C0
        1C0   1C1
     2C0   2C1   2C2
  3C0   3C1   3C2   3C3

  ----------------------------------------------------

  public class PascalsTriangle {
    public static void main(String[] args) {
        int n = 5;
        printPascalsTriangle(n);
    }

    public static void printPascalsTriangle(int n) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                System.out.print(" ");
            }
            for (int j = 0; j <= i; j++) {
                System.out.print(nCr(i, j) + " ");
            }
            System.out.println();
        }
    }

    public static long nCr(int n, int r) {
        if (r > n - r) {
            r = n - r;
        }
        long result = 1;
        for (int i = 0; i < r; i++) {
            result = result * (n - i) / (i + 1);
        }
        return result;
    }
}
------------------------------------------------------

// "static void main" must be defined in a public class.
// Print Pascal's Triangle in Java
import java.io.*;

class Main {
    public int factorial(int i)
    {
        if (i == 0)
            return 1;
        return i * factorial(i - 1);
    }
    public static void main(String[] args)
    {
        int n = 4, i, j;
        Main g = new Main();
        for (i = 0; i <= n; i++) {
            for (j = 0; j <= n - i; j++) {

                // for left spacing
                System.out.print(" ");
            }
            for (j = 0; j <= i; j++) {

                // nCr formula
                System.out.print(
                    " "
                    + g.factorial(i)
                          / (g.factorial(i - j)
                             * g.factorial(j)));
            }

            // for newline
            System.out.println();
        }
    }
}

