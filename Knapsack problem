Input: capacity = 4, val[] = [1, 2, 3], wt[] = [4, 5, 1] 
Output: 3
Explanation: Choose the last item, which weighs 1 unit and has a value of 3.
Input: capacity = 3, val[] = [1, 2, 3], wt[] = [4, 5, 6] 
Output: 0
Explanation: Every item has a weight exceeding the knapsack's capacity (3).
Input: capacity = 5, val[] = [10, 40, 30, 50], wt[] = [5, 4, 6, 3] 
Output: 50
Explanation: Choose the second item (value 40, weight 4) and the fourth item (value 50, weight 3) for a total weight of 7, which exceeds the capacity. Instead, pick the last item (value 50, weight 3) for a total value of 50.

--------------------------------------------------------------------------------------------


class Solution {
    // Function to return max value that can be put in knapsack of capacity.
    static int knapSack(int capacity, int val[], int wt[]) {
        int[][] dp = new int[val.length+1][capacity+1];
        
        if(val.length==0 || capacity==0){
            return 0;
        }
        for(int i=1;i<=val.length;i++){
            for(int j=1;j<=capacity;j++){
                if(wt[i-1]<=j){
                    dp[i][j]=Math.max(dp[i-1][j], val[i-1]+dp[i-1][j-wt[i-1]]);
                }else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[val.length][capacity];
    }
}
